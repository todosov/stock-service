import com.bmuschko.gradle.docker.DockerRegistryCredentials

buildscript {
	ext {
		springBootVersion = '2.0.4.RELEASE'
        dockerPluginVersion = '3.6.0'
        nodePluginVersion = '1.2.0'
	}
	repositories {
		jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("com.bmuschko:gradle-docker-plugin:${dockerPluginVersion}")
        classpath("com.moowork.gradle:gradle-node-plugin:${nodePluginVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.bmuschko.docker-spring-boot-application'
apply plugin: 'com.moowork.node'

group = 'com.otodosov'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

jar.baseName = 'stock-service'

repositories {
    jcenter()
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.postgresql:postgresql')
    compile('org.flywaydb:flyway-core:5.1.4')

    compile('org.springframework.boot:spring-boot-starter-data-rest')

    compileOnly('org.projectlombok:lombok:1.18.2')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('com.h2database:h2')
}


//configure docker plugin
docker {
    springBootApplication {
        baseImage = 'openjdk:8-alpine'
        ports = [8080]
        tag = "otodosov/${jar.baseName}:${System.env.HASH_VERSION}"
    }
}

def credentials = new DockerRegistryCredentials()
//credentials.url = "https://otodosov.public"
credentials.username = "${System.env.DOCKER_USER}"
credentials.password = "${System.env.DOCKER_PASS}"

dockerPushImage {
    imageName = "otodosov/${jar.baseName}"
    tag = "${System.env.HASH_VERSION}"
    registryCredentials = credentials
}

//configure npm and build ui
node {
    version = '6.11.4'
    npmVersion = '3.5.2'
    download = true
}

def uiWorkDir = file("${project.projectDir}/stock-service-ui")

npmInstall {
    workingDir = uiWorkDir
}

task npmRunBuild(type: NpmTask) {
    args = ['run', 'build']
    workingDir = uiWorkDir
}
npmRunBuild.dependsOn(npmInstall)
npmInstall.dependsOn(npmSetup)
npmInstall.dependsOn(nodeSetup)


clean.doFirst {
    delete "${project.projectDir}/src/main/resources/static"
}